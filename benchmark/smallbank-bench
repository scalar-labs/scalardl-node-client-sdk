#!/usr/bin/env node
/* eslint-disable require-jsdoc */

const fs = require('fs');
const {fork} = require('child_process');

const [
  properties,
  numberOfAccount,
  numberOfConcurrency,
  duration,
  rampUpTime,
  operations,
] = parseArgv();

let counter = 0;
let errorCount = 0;
let totalCounter = 0;
let latencyTotal = 0;

const start = Date.now();
const end = start + duration * 1000 + rampUpTime * 1000;

const workers = [];
const concurrenciesPerProcess = divideConcurrency(numberOfConcurrency);

for (let i = 0; i < concurrenciesPerProcess.length; i++) {
  const worker = fork('./smallbank-bench-worker', [
    concurrenciesPerProcess[i].toString(),
    start.toString(),
    properties,
    numberOfAccount.toString(),
    rampUpTime.toString(),
    operations.join(','),
  ]);

  worker.on('message', (m) => {
    if (m.counter) {
      counter++;
    }

    if (m.error) {
      errorCount++;
    }

    if (m.totalCounter) {
      totalCounter += m.totalCounter;
    }

    if (m.latencyTotal) {
      latencyTotal += m.latencyTotal;
    }
  });

  workers.push(worker);
}

let from = start;
(async () => {
  while (true) {
    const to = Date.now();
    if (to >= end) {
      for (const w of workers) {
        w.kill();
      }
      break;
    }

    console.log(`${(counter * 1000) / (to - from)} tps`);
    counter = 0;
    from = Date.now();
    await sleep(1000);
  }
})().then(() => {
  const tps = (totalCounter * 1000) / (duration * 1000);
  const averageLatency = latencyTotal / totalCounter;

  console.log(`TPS: ${tps}`);
  console.log(`Average-Latency(ms): ${averageLatency}`);
  console.log(`Error-Counts: ${errorCount}`);
  process.exit(0);
});

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

function parseArgv() {
  let properties = 'client.properties.json';
  let numberOfAccount = 10000;
  let numberOfConcurrency = 1;
  let duration = 200;
  let rampUpTime = 60;
  let operations = [
    'transact_savings',
    'deposit_checking',
    'send_payment',
    'write_check',
    'amalgamate',
  ];

  const argv = process.argv.slice(2);

  for (let i = 0; i < argv.length; i++) {
    switch (argv[i]) {
      case '--properties':
      case '--config':
        if (argv[i + 1] && fs.existsSync(argv[i + 1])) {
          properties = argv[i + 1];
          i++;
        } else {
          usage();
          process.exit(1);
        }
        break;

      case '--num-accounts':
        if (argv[i + 1] && !isNaN(argv[i + 1]) && parseInt(argv[i + 1]) > 0) {
          numberOfAccount = parseInt(argv[i + 1]);
          i++;
        } else {
          usage();
          process.exit(1);
        }
        break;

      case '--num-concurrencies':
        if (argv[i + 1] && !isNaN(argv[i + 1]) && parseInt(argv[i + 1]) > 0) {
          numberOfConcurrency = parseInt(argv[i + 1]);
          i++;
        } else {
          usage();
          process.exit(1);
        }
        break;

      case '--duration':
        if (argv[i + 1] && !isNaN(argv[i + 1]) && parseInt(argv[i + 1]) > 0) {
          duration = parseInt(argv[i + 1]);
          i++;
        } else {
          usage();
          process.exit(1);
        }
        break;

      case '--ramp-up-time':
        if (argv[i + 1] && !isNaN(argv[i + 1]) && parseInt(argv[i + 1]) > 0) {
          rampUpTime = parseInt(argv[i + 1]);
          i++;
        } else {
          usage();
          process.exit(1);
        }
        break;

      case '--operation':
        if (argv[i + 1] && argv[i + 1].split(',').length > 0) {
          operations = argv[i + 1].split(',');
          i++;
        } else {
          usage();
          process.exit(1);
        }
        break;

      case '-h':
      case '--help':
        usage();
        process.exit(0);
    }
  }

  return [
    properties,
    numberOfAccount,
    numberOfConcurrency,
    duration,
    rampUpTime,
    operations,
  ];
}

function usage() {
  const path = require('path');
  console.log(
      'Usage: ' +
      `${path.basename(process.argv[1])} ` +
      '[--properties PROPERTIES_FILE, --config PROPERTIES_FILE] ' +
      '[--num-accounts NUM_ACCOUNTS] ' +
      '[--num-concurrencies NUM_CONCURRENCIES] ' +
      '[--duration DURATION] ' +
      '[--ramp-up-time RAMP_UP_TIME] ' +
      '[--operation OPERATION] ' +
      '[-h, --help]',
  );

  console.log(
      '\t--properties PROPERTIES_FILE, --config PROPERTIES_FILE\n' +
      '\t\tA configuration file in properties format.\n' +
      '\t\tDefault: client.properties.json\n' +
      '\t--num-accounts NUM_ACCOUNTS\n' +
      '\t\tThe number of target accounts.\n' +
      '\t\tDefault: 10000\n' +
      '\t--num-concurrencies NUM_CONCURRENCIES\n' +
      '\t\tThe number of concurrencies to run.\n' +
      '\t\tDefault: 1\n' +
      '\t--duration DURATION\n' +
      '\t\tThe duration of benchmark in seconds.\n' +
      '\t\tDefault: 200\n' +
      '\t--ramp-up-time RAMP_UP_TIME\n' +
      '\t\tThe ramp up time in seconds.\n' +
      '\t\tDefault: 60\n' +
      '\t--operation OPERATION\n' +
      '\t\ttransact_savings,' +
      'deposit_checking, send_payment, write_check, amalgamate.\n' +
      '\t\tDefault: transact_savings,deposit_checking,' +
      'send_payment,write_check,amalgamate',
  );
}

function divideConcurrency(numberOfConcurrency) {
  const numberOfCpu = require('os').cpus().length;
  const numberOfProcess =
    numberOfConcurrency < numberOfCpu ? numberOfConcurrency : numberOfCpu;
  const reminder = numberOfConcurrency % numberOfProcess;

  const averageConcurrency =
    (numberOfConcurrency - reminder) / numberOfProcess;
  const concurrenciesPerProcess =
    Array(numberOfProcess).fill(averageConcurrency);

  for (let i = 0; i < reminder; i++) {
    concurrenciesPerProcess[i]++;
  }

  return concurrenciesPerProcess;
}
