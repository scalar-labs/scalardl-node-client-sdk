# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # set a fixed version for the image circleci/openjdk:8-jdk-node-browsers
      - image: circleci/openjdk:8-jdk-node-browsers
        environment:
          MAX_HEAP_SIZE: 2048m
          HEAP_NEWSIZE: 512m

      - image: cassandra:3.11
        container_name: "circleci_scalardl-cassandra-1"
        name: cassandra
        port: "9042:9042"
        environment:
          MAX_HEAP_SIZE: 1300m
          HEAP_NEWSIZE: 512m
          CASSANDRA_DC: dc1
          CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
        networks: scalar-ledger

      - image: ghcr.io/scalar-labs/scalardl-schema-loader:1.3.0
        command:
          - "--cassandra"
          - "-h"
          - "cassandra"
          - "-R"
          - "1"
        networks: scalar-ledger
        restart: on-failure

      - image: ghcr.io/scalar-labs/scalar-ledger:2.1.0
        auth:
          username: $GHCR_USERNAME
          password: $GHCR_PAT
        volumes: ./fixture/bar-key.pem:/scalar/bar-key.pem
        depends_on: cassandra
        environment:
          SCALAR_DB_CONTACT_POINTS: cassandra
          SCALAR_DB_STORAGE: cassandra
          SCALAR_DL_LEDGER_PROOF_ENABLED: true
          SCALAR_DL_LEDGER_PROOF_PRIVATE_KEY_PATH: /scalar/bar-key.pem
          MAX_HEAP_SIZE: 500m
          HEAP_NEWSIZE: 512m
        networks: scalar-ledger
        command: |
          dockerize -template ledger.properties.tmpl:ledger.properties
          -template log4j.properties.tmpl:log4j.properties
          -wait tcp://cassandra:9042 -timeout 60s
          ./bin/scalar-ledger --config ledger.properties

      - image: envoyproxy/envoy:v1.12.2
        container_name: "circleci_scalardl-envoy-1"
        ports:
          - "9901:9901"
          - "50051:50051"
          - "50052:50052"
        volumes:
          - ./envoy.yaml:/etc/envoy/envoy.yaml
        depends_on:
          - scalar-ledger
        command: /usr/local/bin/envoy -c /etc/envoy/envoy.yaml
        networks: scalar-ledger

    working_directory: ~/scalardl-node-client-sdk

    steps:
      - checkout
      # Download and cache dependencies.
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}

      - run:
          name: Install cqlsh
          # We need to edit DEFAULT_CQLVER defined in the cqlsh script
          # to connect to the server without --cqlversion command line option
          command: |
            curl -O https://bootstrap.pypa.io/2.7/get-pip.py
            sudo python get-pip.py
            sudo pip install cqlsh
            sudo sed -i "s/^DEFAULT_CQLVER = .*/DEFAULT_CQLVER = '3.4.4'/" /usr/local/bin/cqlsh

      - run:
          name: Wait for Cassandra
          # dockerize command is included in circleci/openjdk:8-jdk image
          command: dockerize -wait tcp://127.0.0.1:9042 -timeout 1m

      - run:
          name: Install schema for function purpose on Cassandra
          command: cqlsh -f .circleci/function_schema.cql

      - run:
          name: Wait for Scalardl
          command: dockerize -wait tcp://127.0.0.1:50051 -timeout 1m

      - run:
          command: npm install

      - save_cache:
          key: v1-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

      # run tests!
      - run:
          command: npm test
          environment:
            MOCHA_FILE: "~/scalardl-node-client-sdk/mochawesome-report/mochawesome.html"
          when: always

      - store_test_results:
          path: ~/scalardl-node-client-sdk/mochawesome-report

      - store_artifacts:
          path: ~/scalardl-node-client-sdk/mochawesome-report
  deploy:
    docker:
      #Node LTS 14.16 "fermium"
      - image: circleci/node:14.16
    steps:
      - checkout
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
      - run:
          name: Publish package
          command: npm publish --access public

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          context: "scalar"
      - deploy:
          context: "scalar"
          requires:
            - build
          filters:
            branches:
              only: master
